plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'edu.itmo.is.lab1'
version = ''
java {
    toolchain { languageVersion = JavaLanguageVersion.of(17) }
}

repositories { mavenCentral() }

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'         // MVC
    implementation 'org.springframework.boot:spring-boot-starter-validation'  // Bean Validation
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'   // UI
    implementation 'org.springframework.boot:spring-boot-starter-websocket'   // STOMP

    // Data JPA без Hibernate + EclipseLink
    implementation('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude group: 'org.hibernate', module: 'hibernate-core'
    }
    implementation 'org.eclipse.persistence:org.eclipse.persistence.jpa:4.0.2' // EclipseLink (Jakarta)
    implementation 'org.postgresql:postgresql:42.7.3'

    // Миграции
    implementation 'org.flywaydb:flyway-core:10.16.0'
    implementation 'org.flywaydb:flyway-database-postgresql:10.16.0'

    // удобства
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.test { useJUnitPlatform() }


def frontendDir = "${rootDir}/frontend"
def frontendBuildDir = file("${frontendDir}/dist").exists() ? "${frontendDir}/dist" : "${frontendDir}/build"

tasks.register('frontendInstall', Exec) {
    workingDir frontendDir
    commandLine 'bash','-lc','if [ -f pnpm-lock.yaml ]; then corepack enable && pnpm i; elif [ -f yarn.lock ]; then corepack enable && yarn install; else npm ci || npm i; fi'
    onlyIf { file(frontendDir).exists() }
}

tasks.register('frontendBuild', Exec) {
    dependsOn 'frontendInstall'
    workingDir frontendDir
    commandLine 'bash','-lc','if [ -f pnpm-lock.yaml ]; then pnpm build; elif [ -f yarn.lock ]; then yarn build; else npm run build; fi'
    onlyIf { file(frontendDir).exists() }
}

tasks.register('copyFrontend', Copy) {
    dependsOn 'frontendBuild'
    from(frontendBuildDir)
    into("${projectDir}/src/main/resources/static")
    onlyIf { file(frontendDir).exists() }
}

tasks.named('processResources') {
    dependsOn 'copyFrontend'
}

